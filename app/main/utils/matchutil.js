'use strict';

var _ = require('lodash');

function fuzzyMatchFallback(elem, keyword, testStr, fuzzyScore) {
  var srcStr = keyword;
  var score = fuzzyScore * 0.5;
  for (var i = 0; i < testStr.length; ++i) {
    var chr = testStr.charAt(i);
    var occurIndex = srcStr.indexOf(chr);
    if (occurIndex < 0) {
      score = 0;
      break;
    }
    score++;
    srcStr = srcStr.substring(0, occurIndex) + srcStr.substring(occurIndex + 1);
  }
  if (srcStr.length > 0) score /= srcStr.length;
  score *= 0.1;
  return { elem: elem, matches: [], score: score, length: srcStr.length };
}

function fuzzyMatch(elem, testStr, keywordGetter) {
  var srcStr = keywordGetter(elem).toLowerCase();

  var maxLength = 15;
  var maxScore = (maxLength + maxLength * maxLength) * 0.5;
  var fuzzyScore = 0;
  var pattern_i = testStr.length - 1;
  var add = 1;
  var matches = [];

  for (var i = srcStr.length - 1; i >= 0; --i) {
    var srcChr = srcStr.charAt(i);
    var srcChrCode = srcStr.charCodeAt(i);
    var testChrCode = testStr.charCodeAt(pattern_i);
    if (pattern_i < 0 || srcChrCode !== testChrCode) {
      add *= 0.5;
      continue;
    }
    pattern_i--;
    add += 1;
    fuzzyScore += add;
    matches.push(i);
  }

  fuzzyScore = Math.min(maxScore, fuzzyScore);
  fuzzyScore /= maxScore;

  var success = pattern_i < 0;
  if (success) {
    return { elem: elem, matches: matches.reverse(), score: fuzzyScore, length: srcStr.length };
  }
  return fuzzyMatchFallback(elem, srcStr, testStr, fuzzyScore);
}

function headMatch(elem, testStr, keywordGetter) {
  var srcStr = keywordGetter(elem);
  var testLength = Math.min(srcStr.length, testStr.length);
  var matches = [];
  for (var i = 0; i < testLength; ++i) {
    if (srcStr.charCodeAt(i) !== testStr.charCodeAt(i)) {
      return { elem: elem, matches: [], score: 0 };
    }
    matches.push(i);
  }
  return { elem: elem, matches: matches, score: 1 };
}

function search(elems, testStr, keywordGetter, matchFunc) {
  var results = [];

  if (testStr === null || testStr === undefined || testStr.length === 0) {
    return results;
  }

  var testStr_norm = testStr.toLowerCase();
  if (_.isArray(elems)) {
    // array
    for (var i = 0; i < elems.length; ++i) {
      var matchResult = matchFunc(elems[i], testStr_norm, keywordGetter);
      if (matchResult.score === 0) continue;
      results.push(matchResult);
    }
  } else if (_.isObject(elems)) {
    // object like { [], [], [], ... }
    for (var prop in elems) {
      var arr = elems[prop];
      for (var _i = 0; _i < arr.length; ++_i) {
        var _matchResult = matchFunc(arr[_i], testStr_norm, keywordGetter);
        if (_matchResult.score === 0) continue;
        results.push(_matchResult);
      }
    }
  } else {
    // can't process
    return results;
  }
  return _.orderBy(results, ['score', 'length'], ['desc', 'asc']); // stable sort
}

function fuzzy(elems, testStr, keywordGetter) {
  return search(elems, testStr, keywordGetter, fuzzyMatch);
}

function head(elems, testStr, keywordGetter) {
  return search(elems, testStr, keywordGetter, headMatch);
}

function makeStringBoldHtml(str, boldIndices) {
  if (boldIndices === null || boldIndices.length === 0) {
    return str;
  }
  var p = '';
  var b_i = 0;
  for (var i = 0; i < str.length; ++i) {
    if (i === boldIndices[b_i]) {
      p += '<b>' + str.charAt(i) + '</b>';
      b_i++;
    } else {
      p += str.charAt(i);
    }
  }
  return p;
}

module.exports = {
  fuzzy: fuzzy,
  head: head,
  makeStringBoldHtml: makeStringBoldHtml
};
//# sourceMappingURL=data:application/json;base64,
