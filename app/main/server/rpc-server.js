'use strict';

var ipc = require('electron').ipcMain;
var co = require('co');

var self = {};
var funcs = {};
var msgQueue = [];
var connectedClient = null;

self.define = function (funcName, func) {
  funcs[funcName] = func;
};

self.send = function (channel, msg) {
  msgQueue.push({ channel: channel, msg: msg });
};

setInterval(function () {
  if (connectedClient === null) return;
  while (msgQueue.length > 0) {
    var item = msgQueue.shift();
    connectedClient.send(item.channel, item.msg);
  }
}, 10);

self.on = function (channel, func) {
  ipc.on(channel, func);
};

ipc.on('__connect', function (evt, args) {
  connectedClient = evt.sender;
});

ipc.on('__rpc_call', function (evt, args) {
  var funcName = args.funcName;
  var id = args.id;
  var params = args.params;
  var replyChannel = '__rpc_' + id;

  var generator = funcs[funcName];
  if (generator === undefined) {
    evt.sender.send(replyChannel, 'undefined function', null);
    return;
  }

  co(generator(params)).then(function (ret) {
    evt.sender.send(replyChannel, null, ret);
  }).catch(function (err) {
    evt.sender.send(replyChannel, err, null);
  });
});

module.exports = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9ycGMtc2VydmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU0sTUFBTSxRQUFRLFVBQVIsRUFBb0IsT0FBcEI7QUFDWixJQUFNLEtBQUssUUFBUSxJQUFSLENBQUw7O0FBRU4sSUFBTSxPQUFPLEVBQVA7QUFDTixJQUFNLFFBQVEsRUFBUjtBQUNOLElBQU0sV0FBVyxFQUFYO0FBQ04sSUFBSSxrQkFBa0IsSUFBbEI7O0FBRUosS0FBSyxNQUFMLEdBQWMsVUFBQyxRQUFELEVBQVcsSUFBWCxFQUFvQjtBQUNoQyxRQUFNLFFBQU4sSUFBa0IsSUFBbEIsQ0FEZ0M7Q0FBcEI7O0FBSWQsS0FBSyxJQUFMLEdBQVksVUFBQyxPQUFELEVBQVUsR0FBVixFQUFrQjtBQUM1QixXQUFTLElBQVQsQ0FBYyxFQUFFLGdCQUFGLEVBQVcsUUFBWCxFQUFkLEVBRDRCO0NBQWxCOztBQUlaLFlBQVksWUFBTTtBQUNoQixNQUFJLG9CQUFvQixJQUFwQixFQUNGLE9BREY7QUFFQSxTQUFPLFNBQVMsTUFBVCxHQUFrQixDQUFsQixFQUFxQjtBQUMxQixRQUFNLE9BQU8sU0FBUyxLQUFULEVBQVAsQ0FEb0I7QUFFMUIsb0JBQWdCLElBQWhCLENBQXFCLEtBQUssT0FBTCxFQUFjLEtBQUssR0FBTCxDQUFuQyxDQUYwQjtHQUE1QjtDQUhVLEVBT1QsRUFQSDs7QUFTQSxLQUFLLEVBQUwsR0FBVSxVQUFDLE9BQUQsRUFBVSxJQUFWLEVBQW1CO0FBQzNCLE1BQUksRUFBSixDQUFPLE9BQVAsRUFBZ0IsSUFBaEIsRUFEMkI7Q0FBbkI7O0FBSVYsSUFBSSxFQUFKLENBQU8sV0FBUCxFQUFvQixVQUFDLEdBQUQsRUFBTSxJQUFOLEVBQWU7QUFDakMsb0JBQWtCLElBQUksTUFBSixDQURlO0NBQWYsQ0FBcEI7O0FBSUEsSUFBSSxFQUFKLENBQU8sWUFBUCxFQUFxQixVQUFDLEdBQUQsRUFBTSxJQUFOLEVBQWU7QUFDbEMsTUFBTSxXQUFXLEtBQUssUUFBTCxDQURpQjtBQUVsQyxNQUFNLEtBQUssS0FBSyxFQUFMLENBRnVCO0FBR2xDLE1BQU0sU0FBUyxLQUFLLE1BQUwsQ0FIbUI7QUFJbEMsTUFBTSwwQkFBd0IsRUFBeEIsQ0FKNEI7O0FBTWxDLE1BQU0sWUFBWSxNQUFNLFFBQU4sQ0FBWixDQU40QjtBQU9sQyxNQUFJLGNBQWMsU0FBZCxFQUF5QjtBQUMzQixRQUFJLE1BQUosQ0FBVyxJQUFYLENBQWdCLFlBQWhCLEVBQThCLG9CQUE5QixFQUFvRCxJQUFwRCxFQUQyQjtBQUUzQixXQUYyQjtHQUE3Qjs7QUFLQSxLQUFHLFVBQVUsTUFBVixDQUFILEVBQXNCLElBQXRCLENBQTJCLFVBQUMsR0FBRCxFQUFTO0FBQ2xDLFFBQUksTUFBSixDQUFXLElBQVgsQ0FBZ0IsWUFBaEIsRUFBOEIsSUFBOUIsRUFBb0MsR0FBcEMsRUFEa0M7R0FBVCxDQUEzQixDQUVHLEtBRkgsQ0FFUyxVQUFDLEdBQUQsRUFBUztBQUNoQixRQUFJLE1BQUosQ0FBVyxJQUFYLENBQWdCLFlBQWhCLEVBQThCLEdBQTlCLEVBQW1DLElBQW5DLEVBRGdCO0dBQVQsQ0FGVCxDQVprQztDQUFmLENBQXJCOztBQW1CQSxPQUFPLE9BQVAsR0FBaUIsSUFBakIiLCJmaWxlIjoic2VydmVyL3JwYy1zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBpcGMgPSByZXF1aXJlKCdlbGVjdHJvbicpLmlwY01haW47XHJcbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKTtcclxuXHJcbmNvbnN0IHNlbGYgPSB7fTtcclxuY29uc3QgZnVuY3MgPSB7fTtcclxuY29uc3QgbXNnUXVldWUgPSBbXTtcclxubGV0IGNvbm5lY3RlZENsaWVudCA9IG51bGw7XHJcblxyXG5zZWxmLmRlZmluZSA9IChmdW5jTmFtZSwgZnVuYykgPT4ge1xyXG4gIGZ1bmNzW2Z1bmNOYW1lXSA9IGZ1bmM7XHJcbn07XHJcblxyXG5zZWxmLnNlbmQgPSAoY2hhbm5lbCwgbXNnKSA9PiB7XHJcbiAgbXNnUXVldWUucHVzaCh7IGNoYW5uZWwsIG1zZyB9KTtcclxufTtcclxuXHJcbnNldEludGVydmFsKCgpID0+IHtcclxuICBpZiAoY29ubmVjdGVkQ2xpZW50ID09PSBudWxsKVxyXG4gICAgcmV0dXJuO1xyXG4gIHdoaWxlIChtc2dRdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCBpdGVtID0gbXNnUXVldWUuc2hpZnQoKTtcclxuICAgIGNvbm5lY3RlZENsaWVudC5zZW5kKGl0ZW0uY2hhbm5lbCwgaXRlbS5tc2cpO1xyXG4gIH1cclxufSwgMTApO1xyXG5cclxuc2VsZi5vbiA9IChjaGFubmVsLCBmdW5jKSA9PiB7XHJcbiAgaXBjLm9uKGNoYW5uZWwsIGZ1bmMpO1xyXG59O1xyXG5cclxuaXBjLm9uKCdfX2Nvbm5lY3QnLCAoZXZ0LCBhcmdzKSA9PiB7XHJcbiAgY29ubmVjdGVkQ2xpZW50ID0gZXZ0LnNlbmRlcjtcclxufSk7XHJcblxyXG5pcGMub24oJ19fcnBjX2NhbGwnLCAoZXZ0LCBhcmdzKSA9PiB7XHJcbiAgY29uc3QgZnVuY05hbWUgPSBhcmdzLmZ1bmNOYW1lO1xyXG4gIGNvbnN0IGlkID0gYXJncy5pZDtcclxuICBjb25zdCBwYXJhbXMgPSBhcmdzLnBhcmFtcztcclxuICBjb25zdCByZXBseUNoYW5uZWwgPSBgX19ycGNfJHtpZH1gO1xyXG5cclxuICBjb25zdCBnZW5lcmF0b3IgPSBmdW5jc1tmdW5jTmFtZV07XHJcbiAgaWYgKGdlbmVyYXRvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBldnQuc2VuZGVyLnNlbmQocmVwbHlDaGFubmVsLCAndW5kZWZpbmVkIGZ1bmN0aW9uJywgbnVsbCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjbyhnZW5lcmF0b3IocGFyYW1zKSkudGhlbigocmV0KSA9PiB7XHJcbiAgICBldnQuc2VuZGVyLnNlbmQocmVwbHlDaGFubmVsLCBudWxsLCByZXQpO1xyXG4gIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGV2dC5zZW5kZXIuc2VuZChyZXBseUNoYW5uZWwsIGVyciwgbnVsbCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
