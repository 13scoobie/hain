'use strict';

var _ = require('lodash');
var path = require('path');
var SimpleCache = require('simple-lru-cache');

var electron = require('electron');
var app = electron.app;

var logger = require('../../utils/logger');
var platformUtil = require('../../../platform-util');

module.exports = function (context) {
  function register() {
    app.on('ready', function () {
      var cache = new SimpleCache({ maxSize: 100 });

      var protocol = electron.protocol;
      protocol.registerBufferProtocol('icon', function (req, callback) {
        var filePath = null;
        try {
          var path_base64 = req.url.substr(7);
          filePath = new Buffer(path_base64, 'base64').toString();
        } catch (e) {
          // error
          return callback();
        }

        if (filePath === null || filePath.length === 0) {
          // error
          return callback();
        }

        var cacheKey = filePath;
        var extName = path.extname(filePath).toLowerCase();

        if (extName.length > 0 && extName !== '.exe' && extName !== '.lnk') {
          cacheKey = extName;
        } else {
          cacheKey = filePath;
        }

        var buffer = cache.get(cacheKey);
        if (buffer === undefined) {
          platformUtil.fetchFileIconAsPng(filePath, function (err, buf) {
            if (err || buf === null) {
              logger.log('internal error ' + err);
              return callback();
            }
            cache.set(cacheKey, buf);
            callback({ mimeType: 'image/png', data: buf });
          });
        } else {
          callback({ mimeType: 'image/png', data: buffer });
        }
      }, function (err) {
        if (err) {
          logger.log('failed to register protocol: icon');
        }
      });
    });
  }

  return { register: register };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9hcHAvaWNvbnByb3RvY29sLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU0sSUFBSSxRQUFRLFFBQVIsQ0FBSjtBQUNOLElBQU0sT0FBTyxRQUFRLE1BQVIsQ0FBUDtBQUNOLElBQU0sY0FBYyxRQUFRLGtCQUFSLENBQWQ7O0FBRU4sSUFBTSxXQUFXLFFBQVEsVUFBUixDQUFYO0FBQ04sSUFBTSxNQUFNLFNBQVMsR0FBVDs7QUFFWixJQUFNLFNBQVMsUUFBUSxvQkFBUixDQUFUO0FBQ04sSUFBTSxlQUFlLFFBQVEsd0JBQVIsQ0FBZjs7QUFFTixPQUFPLE9BQVAsR0FBaUIsVUFBQyxPQUFELEVBQWE7QUFDNUIsV0FBUyxRQUFULEdBQW9CO0FBQ2xCLFFBQUksRUFBSixDQUFPLE9BQVAsRUFBZ0IsWUFBTTtBQUNwQixVQUFNLFFBQVEsSUFBSSxXQUFKLENBQWdCLEVBQUUsU0FBUyxHQUFULEVBQWxCLENBQVIsQ0FEYzs7QUFHcEIsVUFBTSxXQUFXLFNBQVMsUUFBVCxDQUhHO0FBSXBCLGVBQVMsc0JBQVQsQ0FBZ0MsTUFBaEMsRUFBd0MsVUFBQyxHQUFELEVBQU0sUUFBTixFQUFtQjtBQUN6RCxZQUFJLFdBQVcsSUFBWCxDQURxRDtBQUV6RCxZQUFJO0FBQ0YsY0FBTSxjQUFjLElBQUksR0FBSixDQUFRLE1BQVIsQ0FBZSxDQUFmLENBQWQsQ0FESjtBQUVGLHFCQUFXLElBQUksTUFBSixDQUFXLFdBQVgsRUFBd0IsUUFBeEIsRUFBa0MsUUFBbEMsRUFBWCxDQUZFO1NBQUosQ0FHRSxPQUFPLENBQVAsRUFBVTs7QUFFVixpQkFBTyxVQUFQLENBRlU7U0FBVjs7QUFLRixZQUFJLGFBQWEsSUFBYixJQUFxQixTQUFTLE1BQVQsS0FBb0IsQ0FBcEIsRUFBdUI7O0FBRTlDLGlCQUFPLFVBQVAsQ0FGOEM7U0FBaEQ7O0FBS0EsWUFBSSxXQUFXLFFBQVgsQ0FmcUQ7QUFnQnpELFlBQU0sVUFBVSxLQUFLLE9BQUwsQ0FBYSxRQUFiLEVBQXVCLFdBQXZCLEVBQVYsQ0FoQm1EOztBQWtCekQsWUFBSSxRQUFRLE1BQVIsR0FBaUIsQ0FBakIsSUFBc0IsWUFBWSxNQUFaLElBQXNCLFlBQVksTUFBWixFQUFvQjtBQUNsRSxxQkFBVyxPQUFYLENBRGtFO1NBQXBFLE1BRU87QUFDTCxxQkFBVyxRQUFYLENBREs7U0FGUDs7QUFNQSxZQUFNLFNBQVMsTUFBTSxHQUFOLENBQVUsUUFBVixDQUFULENBeEJtRDtBQXlCekQsWUFBSSxXQUFXLFNBQVgsRUFBc0I7QUFDeEIsdUJBQWEsa0JBQWIsQ0FBZ0MsUUFBaEMsRUFBMEMsVUFBQyxHQUFELEVBQU0sR0FBTixFQUFjO0FBQ3RELGdCQUFJLE9BQU8sUUFBUSxJQUFSLEVBQWM7QUFDdkIscUJBQU8sR0FBUCxxQkFBNkIsR0FBN0IsRUFEdUI7QUFFdkIscUJBQU8sVUFBUCxDQUZ1QjthQUF6QjtBQUlBLGtCQUFNLEdBQU4sQ0FBVSxRQUFWLEVBQW9CLEdBQXBCLEVBTHNEO0FBTXRELHFCQUFTLEVBQUUsVUFBVSxXQUFWLEVBQXVCLE1BQU0sR0FBTixFQUFsQyxFQU5zRDtXQUFkLENBQTFDLENBRHdCO1NBQTFCLE1BU087QUFDTCxtQkFBUyxFQUFFLFVBQVUsV0FBVixFQUF1QixNQUFNLE1BQU4sRUFBbEMsRUFESztTQVRQO09BekJzQyxFQXFDckMsVUFBQyxHQUFELEVBQVM7QUFDVixZQUFJLEdBQUosRUFBUztBQUNQLGlCQUFPLEdBQVAsQ0FBVyxtQ0FBWCxFQURPO1NBQVQ7T0FEQyxDQXJDSCxDQUpvQjtLQUFOLENBQWhCLENBRGtCO0dBQXBCOztBQWtEQSxTQUFPLEVBQUUsa0JBQUYsRUFBUCxDQW5ENEI7Q0FBYiIsImZpbGUiOiJzZXJ2ZXIvYXBwL2ljb25wcm90b2NvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuY29uc3QgU2ltcGxlQ2FjaGUgPSByZXF1aXJlKCdzaW1wbGUtbHJ1LWNhY2hlJyk7XHJcblxyXG5jb25zdCBlbGVjdHJvbiA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XHJcbmNvbnN0IGFwcCA9IGVsZWN0cm9uLmFwcDtcclxuXHJcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2xvZ2dlcicpO1xyXG5jb25zdCBwbGF0Zm9ybVV0aWwgPSByZXF1aXJlKCcuLi8uLi8uLi9wbGF0Zm9ybS11dGlsJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IChjb250ZXh0KSA9PiB7XHJcbiAgZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XHJcbiAgICBhcHAub24oJ3JlYWR5JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjYWNoZSA9IG5ldyBTaW1wbGVDYWNoZSh7IG1heFNpemU6IDEwMCB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHByb3RvY29sID0gZWxlY3Ryb24ucHJvdG9jb2w7XHJcbiAgICAgIHByb3RvY29sLnJlZ2lzdGVyQnVmZmVyUHJvdG9jb2woJ2ljb24nLCAocmVxLCBjYWxsYmFjaykgPT4ge1xyXG4gICAgICAgIGxldCBmaWxlUGF0aCA9IG51bGw7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IHBhdGhfYmFzZTY0ID0gcmVxLnVybC5zdWJzdHIoNyk7XHJcbiAgICAgICAgICBmaWxlUGF0aCA9IG5ldyBCdWZmZXIocGF0aF9iYXNlNjQsICdiYXNlNjQnKS50b1N0cmluZygpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmaWxlUGF0aCA9PT0gbnVsbCB8fCBmaWxlUGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjYWNoZUtleSA9IGZpbGVQYXRoO1xyXG4gICAgICAgIGNvbnN0IGV4dE5hbWUgPSBwYXRoLmV4dG5hbWUoZmlsZVBhdGgpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIGlmIChleHROYW1lLmxlbmd0aCA+IDAgJiYgZXh0TmFtZSAhPT0gJy5leGUnICYmIGV4dE5hbWUgIT09ICcubG5rJykge1xyXG4gICAgICAgICAgY2FjaGVLZXkgPSBleHROYW1lO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjYWNoZUtleSA9IGZpbGVQYXRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcclxuICAgICAgICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHBsYXRmb3JtVXRpbC5mZXRjaEZpbGVJY29uQXNQbmcoZmlsZVBhdGgsIChlcnIsIGJ1ZikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyIHx8IGJ1ZiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIGxvZ2dlci5sb2coYGludGVybmFsIGVycm9yICR7ZXJyfWApO1xyXG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgYnVmKTtcclxuICAgICAgICAgICAgY2FsbGJhY2soeyBtaW1lVHlwZTogJ2ltYWdlL3BuZycsIGRhdGE6IGJ1ZiB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjYWxsYmFjayh7IG1pbWVUeXBlOiAnaW1hZ2UvcG5nJywgZGF0YTogYnVmZmVyIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgIGxvZ2dlci5sb2coJ2ZhaWxlZCB0byByZWdpc3RlciBwcm90b2NvbDogaWNvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7IHJlZ2lzdGVyIH07XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
