'use strict';

var fs = require('fs-extra');
var got = require('got');
var tarball = require('tarball-extract');

var self = {};

self.downloadFile = function (url, destPath) {
  return new Promise(function (resolve, reject) {
    var fileStream = fs.createWriteStream(destPath);
    fileStream.on('error', function (err) {
      reject(err);
    });
    fileStream.on('finish', function () {
      resolve();
    });
    got.stream(url).pipe(fileStream);
  });
};

self.extractTarball = function (filePath, destPath) {
  return new Promise(function (resolve, reject) {
    tarball.extractTarball(filePath, destPath, function (err) {
      if (err) {
        return reject(err);
      }
      resolve();
    });
  });
};

self.move = function (src, dst) {
  return new Promise(function (resolve, reject) {
    fs.move(src, dst, function (err) {
      if (err) return reject(err);
      return resolve();
    });
  });
};

self.remove = function (path) {
  return new Promise(function (resolve, reject) {
    fs.remove(path, function (err) {
      if (err) return reject(err);
      return resolve();
    });
  });
};

self.ensureDir = function (path) {
  return new Promise(function (resolve, reject) {
    fs.ensureDir(path, function (err) {
      if (err) return reject(err);
      return resolve();
    });
  });
};

self.readdir = function (path) {
  return new Promise(function (resolve, reject) {
    fs.readdir(path, function (err, files) {
      if (err) return reject(err);
      return resolve(files);
    });
  });
};

self.readFile = function (filePath) {
  return new Promise(function (resolve, reject) {
    fs.readFile(filePath, function (err, contents) {
      if (err) return reject(err);
      return resolve(contents);
    });
  });
};

module.exports = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvaGFpbi1wYWNrYWdlLW1hbmFnZXIvZmlsZXV0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTSxLQUFLLFFBQVEsVUFBUixDQUFMO0FBQ04sSUFBTSxNQUFNLFFBQVEsS0FBUixDQUFOO0FBQ04sSUFBTSxVQUFVLFFBQVEsaUJBQVIsQ0FBVjs7QUFFTixJQUFNLE9BQU8sRUFBUDs7QUFFTixLQUFLLFlBQUwsR0FBb0IsVUFBVSxHQUFWLEVBQWUsUUFBZixFQUF5QjtBQUMzQyxTQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBcUI7QUFDdEMsUUFBTSxhQUFhLEdBQUcsaUJBQUgsQ0FBcUIsUUFBckIsQ0FBYixDQURnQztBQUV0QyxlQUFXLEVBQVgsQ0FBYyxPQUFkLEVBQXVCLFVBQUMsR0FBRCxFQUFTO0FBQzlCLGFBQU8sR0FBUCxFQUQ4QjtLQUFULENBQXZCLENBRnNDO0FBS3RDLGVBQVcsRUFBWCxDQUFjLFFBQWQsRUFBd0IsWUFBTTtBQUM1QixnQkFENEI7S0FBTixDQUF4QixDQUxzQztBQVF0QyxRQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLElBQWhCLENBQXFCLFVBQXJCLEVBUnNDO0dBQXJCLENBQW5CLENBRDJDO0NBQXpCOztBQWFwQixLQUFLLGNBQUwsR0FBc0IsVUFBVSxRQUFWLEVBQW9CLFFBQXBCLEVBQThCO0FBQ2xELFNBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjtBQUN0QyxZQUFRLGNBQVIsQ0FBdUIsUUFBdkIsRUFBaUMsUUFBakMsRUFBMkMsVUFBQyxHQUFELEVBQVM7QUFDbEQsVUFBSSxHQUFKLEVBQVM7QUFDUCxlQUFPLE9BQU8sR0FBUCxDQUFQLENBRE87T0FBVDtBQUdBLGdCQUprRDtLQUFULENBQTNDLENBRHNDO0dBQXJCLENBQW5CLENBRGtEO0NBQTlCOztBQVd0QixLQUFLLElBQUwsR0FBWSxVQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW9CO0FBQzlCLFNBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjtBQUN0QyxPQUFHLElBQUgsQ0FBUSxHQUFSLEVBQWEsR0FBYixFQUFrQixVQUFDLEdBQUQsRUFBUztBQUN6QixVQUFJLEdBQUosRUFBUyxPQUFPLE9BQU8sR0FBUCxDQUFQLENBQVQ7QUFDQSxhQUFPLFNBQVAsQ0FGeUI7S0FBVCxDQUFsQixDQURzQztHQUFyQixDQUFuQixDQUQ4QjtDQUFwQjs7QUFTWixLQUFLLE1BQUwsR0FBYyxVQUFVLElBQVYsRUFBZ0I7QUFDNUIsU0FBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQXFCO0FBQ3RDLE9BQUcsTUFBSCxDQUFVLElBQVYsRUFBZ0IsVUFBQyxHQUFELEVBQVM7QUFDdkIsVUFBSSxHQUFKLEVBQVMsT0FBTyxPQUFPLEdBQVAsQ0FBUCxDQUFUO0FBQ0EsYUFBTyxTQUFQLENBRnVCO0tBQVQsQ0FBaEIsQ0FEc0M7R0FBckIsQ0FBbkIsQ0FENEI7Q0FBaEI7O0FBU2QsS0FBSyxTQUFMLEdBQWlCLFVBQVUsSUFBVixFQUFnQjtBQUMvQixTQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBcUI7QUFDdEMsT0FBRyxTQUFILENBQWEsSUFBYixFQUFtQixVQUFDLEdBQUQsRUFBUztBQUMxQixVQUFJLEdBQUosRUFBUyxPQUFPLE9BQU8sR0FBUCxDQUFQLENBQVQ7QUFDQSxhQUFPLFNBQVAsQ0FGMEI7S0FBVCxDQUFuQixDQURzQztHQUFyQixDQUFuQixDQUQrQjtDQUFoQjs7QUFTakIsS0FBSyxPQUFMLEdBQWUsVUFBVSxJQUFWLEVBQWdCO0FBQzdCLFNBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjtBQUN0QyxPQUFHLE9BQUgsQ0FBVyxJQUFYLEVBQWlCLFVBQUMsR0FBRCxFQUFNLEtBQU4sRUFBZ0I7QUFDL0IsVUFBSSxHQUFKLEVBQVMsT0FBTyxPQUFPLEdBQVAsQ0FBUCxDQUFUO0FBQ0EsYUFBTyxRQUFRLEtBQVIsQ0FBUCxDQUYrQjtLQUFoQixDQUFqQixDQURzQztHQUFyQixDQUFuQixDQUQ2QjtDQUFoQjs7QUFTZixLQUFLLFFBQUwsR0FBZ0IsVUFBVSxRQUFWLEVBQW9CO0FBQ2xDLFNBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjtBQUN0QyxPQUFHLFFBQUgsQ0FBWSxRQUFaLEVBQXNCLFVBQUMsR0FBRCxFQUFNLFFBQU4sRUFBbUI7QUFDdkMsVUFBSSxHQUFKLEVBQVMsT0FBTyxPQUFPLEdBQVAsQ0FBUCxDQUFUO0FBQ0EsYUFBTyxRQUFRLFFBQVIsQ0FBUCxDQUZ1QztLQUFuQixDQUF0QixDQURzQztHQUFyQixDQUFuQixDQURrQztDQUFwQjs7QUFTaEIsT0FBTyxPQUFQLEdBQWlCLElBQWpCIiwiZmlsZSI6InBsdWdpbnMvaGFpbi1wYWNrYWdlLW1hbmFnZXIvZmlsZXV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XHJcbmNvbnN0IGdvdCA9IHJlcXVpcmUoJ2dvdCcpO1xyXG5jb25zdCB0YXJiYWxsID0gcmVxdWlyZSgndGFyYmFsbC1leHRyYWN0Jyk7XHJcblxyXG5jb25zdCBzZWxmID0ge307XHJcblxyXG5zZWxmLmRvd25sb2FkRmlsZSA9IGZ1bmN0aW9uICh1cmwsIGRlc3RQYXRoKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IGZpbGVTdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShkZXN0UGF0aCk7XHJcbiAgICBmaWxlU3RyZWFtLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgcmVqZWN0KGVycik7XHJcbiAgICB9KTtcclxuICAgIGZpbGVTdHJlYW0ub24oJ2ZpbmlzaCcsICgpID0+IHtcclxuICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgfSk7XHJcbiAgICBnb3Quc3RyZWFtKHVybCkucGlwZShmaWxlU3RyZWFtKTtcclxuICB9KTtcclxufTtcclxuXHJcbnNlbGYuZXh0cmFjdFRhcmJhbGwgPSBmdW5jdGlvbiAoZmlsZVBhdGgsIGRlc3RQYXRoKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIHRhcmJhbGwuZXh0cmFjdFRhcmJhbGwoZmlsZVBhdGgsIGRlc3RQYXRoLCAoZXJyKSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5zZWxmLm1vdmUgPSBmdW5jdGlvbiAoc3JjLCBkc3QpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgZnMubW92ZShzcmMsIGRzdCwgKGVycikgPT4ge1xyXG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgIHJldHVybiByZXNvbHZlKCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufTtcclxuXHJcbnNlbGYucmVtb3ZlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgZnMucmVtb3ZlKHBhdGgsIChlcnIpID0+IHtcclxuICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5zZWxmLmVuc3VyZURpciA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGZzLmVuc3VyZURpcihwYXRoLCAoZXJyKSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcclxuICAgICAgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuc2VsZi5yZWFkZGlyID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgZnMucmVhZGRpcihwYXRoLCAoZXJyLCBmaWxlcykgPT4ge1xyXG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgIHJldHVybiByZXNvbHZlKGZpbGVzKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuc2VsZi5yZWFkRmlsZSA9IGZ1bmN0aW9uIChmaWxlUGF0aCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBmcy5yZWFkRmlsZShmaWxlUGF0aCwgKGVyciwgY29udGVudHMpID0+IHtcclxuICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZShjb250ZW50cyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gc2VsZjtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
